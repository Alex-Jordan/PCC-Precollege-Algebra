# WeBWorK problem written by Carl Yao
# Portland Community College
#
# Give a function's graph, find values of f(a); find f(   )=b.
#
# Last update: Carl Yao 04/14/2014
#
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Function')
## DBsection()
## KEYWORDS('function','graph')
## DBCCSS('8.F','F-IF')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Alex Jordan, Carl Yao, Chris Hughes')
## Institution('PCC')

##############################################

DOCUMENT();

loadMacros(
  "PGgraphmacros.pl",
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PCCgraphMacros.pl",
  "PGcourse.pl",
);

##############################################
TEXT(beginproblem());

Context("Numeric");
$refreshCachedImages=1;

#Decide the number of points in the graph.
$numPoints = 3;

#Create ordered pairs with no duplicate values in x, no duplicate values in y.
@px=();
@py=();
@xArray = (-5..5);
@yArray = (-5..5);
for my $i (0..$numPoints-1) {
   $px[$i] = splice @xArray,random(0,$#xArray,1),1;
   $py[$i] = splice @yArray,random(0,$#yArray,1),1;
}

#Intentionally create a duplicate y value in two points.
$dup0 = random(0,$numPoints-1);
do {$dup1=random(0,$numPoints-1);} until ($dup0!=$dup1);
$py[$dup0]=$py[$dup1];

#Decide the correct answers

@ansXDups=();
$j = 0;

$ansYDup = $py[$dup0];

for my $i (0..$numPoints-1) {
   if ($py[$i]!=$py[$dup0]) {
      $ansXNoDup = $px[$i];
      $ansYNoDup = $py[$i];
   } else {
      $ansXDups[$j++] = $px[$i];
   }
}
$ansXDupList = List($ansXDups[0],$ansXDups[1]);
$ansXDup0 = $ansXDups[0];
$ansXDup1 = $ansXDups[1];

($min[0], $max[0], $min[1], $max[1], $ticknum[0], $ticknum[1], $xticks_ref, $yticks_ref, $marksep[0], $marksep[1]) = NiceGraphParameters([-5,5],[-5,5],centerOrigin=>1);

@xticks = @$xticks_ref;
@yticks = @$yticks_ref;

$ALTPoints="";
for my $i (0..0) {
  $gr[$i] = init_graph($min[0],$min[1],$max[0],$max[1],
   axes=>[0,0],
   grid=>[$ticknum[0],$ticknum[1]],
   size=>[xPixels(),yPixels()]
  );
  $gr[$i]->lb('reset');
  for my $j (@xticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($j, -$marksep[1]/8, $j,'black','center','top'));
  }

  for my $j (@yticks) {
    if (abs($j)<10**(-10)) {next;}
    $gr[$i]->lb( new Label($marksep[0]/8, $j, $j,'black','left','middle'));
  }

  for my $j (0..$numPoints-1) {
    $gr[$i]->stamps( closed_circle($px[$j],$py[$j],'blue') );
    $gr[$i]->lb( new Label($px[$j],$py[$j]-$sign*$marksep[1]/8, "($px[$j],$py[$j])", 'blue','left','top'));
    $ALTPoints .= "($px[$j],$py[$j]), ";
  }
}

$ALTPoints =~ s/, $//;
$ALTPoints =~ s|(.+), |$1 and |;
$ALT0 = "This is the graph of a function consisting of the following points: $ALTPoints.";
$ALTPoints =~ s/ and /, /;

##############################################
Context("LimitedNumeric");
BEGIN_PGML

The graph of function [`f(x)`] is shown below.

[@EnlargeImageStatementPGML()@]**


>>[@image(insertGraph($gr[0]), width=>xScreen(), height=>yScreen(), tex_size=>TeXscalar(), extra_html_tags=>"alt = '$ALT0' title = '$ALT0'") @]*<<

Based on the given graph of [`f(x)`], fill in the blanks. If there are more than one answers for a blank, use a comma to separate your answers.

    [``f([$ansXNoDup])``]=[_________]{$ansYNoDup}

    [``f(``][_______]{$ansXDupList}[``)=[$ansYDup]``]

END_PGML
##############################################

BEGIN_PGML_SOLUTION

The function [`f(x)`] has [`3`] ordered pairs:

    [`` ([$ansXNoDup],[$ansYNoDup]), ([$ansXDup0],[$ansYDup]), ([$ansXDup1],[$ansYDup]) ``]

In function notation, we have:

    [`` f([$ansXNoDup])=[$ansYNoDup], f([$ansXDup0])=[$ansYDup], f([$ansXDup1])=[$ansYDup] ``]

END_PGML_SOLUTION


ENDDOCUMENT();
